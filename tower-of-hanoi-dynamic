#include <stdio.h>
#include<limits.h>
#include<malloc.h>
#define N 6
#define EMPTY 0

typedef struct node{
    
    int data;
    struct node * next;
}NODE;

typedef NODE* NODE_PTR;
NODE_PTR src, des, tem,newnode,safe,tptr;
int count;

void initialize(){
    
    newnode=(NODE_PTR)malloc(sizeof(NODE));
    newnode->data = INT_MAX;
    newnode->next = NULL;
    
    src = des = tem = newnode;
    count=0;
    
    for(int i=0;i<N;i++){
        
        newnode=(NODE_PTR)malloc(sizeof(NODE));
        newnode->data = N-i;
        newnode->next = src;
        src = newnode;
    
    }
}

void print(){
    
    for(tptr = src;tptr;printf("%d ",tptr->data),tptr=tptr->next);
    printf("\n");
    for(tptr = tem;tptr;printf("%d ",tptr->data),tptr=tptr->next);
    printf("\n");
    for(tptr = des;tptr;printf("%d ",tptr->data),tptr=tptr->next);
    printf("\n");
    printf("\n");
    printf("\n");
}



void solve(){
   
    while(1){
       
        if(src->data < tem->data){
            safe = src;
            src=src->next;
            safe->next =tem;
            tem=safe; 
        }
        else{
            safe = tem;
            tem=tem->next;
            safe->next =src;
            src=safe;
        }
        
        
        count++;
        print();
        if(src->next == NULL && (tem->next == NULL || des->next == NULL))
            break;
        
        if(src->data < des->data){
            safe = src;
            src=src->next;
            safe->next =des;
            des=safe; 
        }
        else{
            safe = des;
            des=des->next;
            safe->next =src;
            src=safe;
        }
        
        count++;
        print();
        if((src->next == NULL && des->next == NULL) || (src->next == NULL && tem->next == NULL))
            break;
        
        
        if(tem->data < des->data){
            safe = tem;
            tem=tem->next;
            safe->next =des;
            des=safe; 
        }
        else{
            safe = des;
            des=des->next;
            safe->next =tem;
            tem=safe; 
        }
        
        count++;
        print();
        if((src->next == NULL && des->next == NULL) || (src->next == NULL && tem->next == NULL) )
            break;
        
    }
    return;
   
}

int main()
{
    
    initialize();
    print();
    solve();
    printf("%d ",count);
    return 0;
}
